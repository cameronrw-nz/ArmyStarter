@using ArmyStarter.Models;
@using ArmyStarter.Blazor.Provider
@inject HttpClient Http

<div>
    <h3>
        Squads Average Wounds
    </h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Stats</th>
                <th>Shooting Wounds</th>
                <th>Shooting Killed</th>
                <th>Melee Wounds</th>
                <th>Melee Killed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var modelDisplay in SquadAverageWoundsDisplays)
            {
                <tr>
                    <td>@modelDisplay.Name</td>
                    <td>@modelDisplay.StatsString</td>
                    <td>@modelDisplay.ShootingWounds</td>
                    <td>@modelDisplay.ShootingKilled</td>
                    <td>@modelDisplay.MeleeWounds</td>
                    <td>@modelDisplay.MeleeKilled</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    IList<PlanModel> PlanModels { get; set; }

    IList<SquadAverageWoundsDisplay> SquadAverageWoundsDisplays { get; set; } = new List<SquadAverageWoundsDisplay>();

    protected override void OnParametersSet()
    {
        var displays = new List<SquadAverageWoundsDisplay>();

        foreach (DefendingModel defendingModel in DefendingModels)
        {
            var shootingWounds = CalculateWoundsByShooting(defendingModel);
            var meleeWounds = CalculateWoundsByMelee(defendingModel);

            var display = new SquadAverageWoundsDisplay
            {
                Name = defendingModel.Name,
                ShootingWounds = shootingWounds.Item2.ToString("0.##"),
                ShootingKilled = shootingWounds.Item1.ToString("0.##"),
                MeleeWounds = meleeWounds.Item1.ToString("0.##"),
                MeleeKilled = meleeWounds.Item2.ToString("0.##"),
                StatsString = GetDefendingStatsString(defendingModel)
            };

            displays.Add(display);
        }

        SquadAverageWoundsDisplays = displays;
    }

    IList<DefendingModel> DefendingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();

            var defendingModels = new List<DefendingModel>()
            {
                new DefendingModel { Name = "GEQ", Toughness = 3, ArmourSave = 5, Wounds = 1 },
                new DefendingModel { Name = "MEQ", Toughness = 4, ArmourSave = 3, Wounds = 1 },
                new DefendingModel { Name = "TEQ", Toughness = 4, ArmourSave = 2, InvulnerableSave = 5, Wounds = 2 },
                new DefendingModel { Name = "LV", Toughness = 6, ArmourSave = 3, Wounds = 10 },
                new DefendingModel { Name = "HV", Toughness = 8, ArmourSave = 3, InvulnerableSave = 4, Wounds = 24 },
            };

            return defendingModels;
        }
    }

    string ModelsKilled(decimal woundsDealt, int modelWounds)
    {
        var modelsKilledString = "";

        var modelsDead = Math.Floor(woundsDealt / modelWounds);
        if (modelsDead >= 1)
        {
            modelsKilledString += $"{modelsDead.ToString()} Dead";

            var remainder = Math.Floor(woundsDealt % modelWounds);
            if (remainder >= 1)
            {
                modelsKilledString += $" - {remainder.ToString()} Wounds";
            }
        }
        else
        {
            var remainder = Math.Floor(woundsDealt % modelWounds);
            if (remainder >= 1)
            {
                modelsKilledString += $"{remainder.ToString()} Wounds";
            }
        }

        return modelsKilledString;
    }

    Tuple<decimal, decimal> CalculateWoundsByShooting(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();

        decimal totalWounds = 0;
        var modelsKilledString = "";
        decimal modelsDead = 0;

        foreach (var model in PlanModels)
        {
            foreach (var modelWeapon in model.PlanModelWeapons.Where(weapon => weapon.Weapon.WeaponType != WeaponType.Melee))
            {
                decimal attacks = 0;
                if (modelWeapon.Weapon.RandomAttacks != null)
                {
                    attacks = (((int)modelWeapon.Weapon.RandomAttacks) + 1) / 2;
                }
                else
                {
                    attacks = modelWeapon.Weapon.Attacks ?? 0;
                }

                var attackingModel = new AttackingModel
                {
                    ToHit = model.Model.BallisticSkill ?? 0,
                    Strength = modelWeapon.Weapon.Strength,
                    Attacks = attacks * modelWeapon.Quantity,
                    AP = modelWeapon.Weapon.AP
                };

                var woundResult = calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
                totalWounds += woundResult;

                var weaponDamage = modelWeapon.Weapon.RandomDamage != null ? (((int)modelWeapon.Weapon.RandomDamage) + 1) / 2 : modelWeapon.Weapon.Damage ?? 1;
                if (weaponDamage >= defendingModel.Wounds)
                {
                    modelsDead += woundResult;
                }
                else
                {
                    var woundResultPerTarget = Math.Ceiling((decimal)(defendingModel.Wounds / weaponDamage));
                    modelsDead += woundResult / woundResultPerTarget;
                }
            }
        }

        return Tuple.Create(modelsDead, totalWounds);
    }

    Tuple<decimal, decimal> CalculateWoundsByMelee(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        decimal modelsDead = 0;
        foreach (var model in PlanModels)
        {
            var modelWeapon = model.Model.Weapons?.FirstOrDefault(weapon => weapon.Weapon.WeaponType == WeaponType.Melee);
            var attackingModel = new AttackingModel
            {
                ToHit = model.Model.WeaponSkill ?? 0,
                Strength = model.Model.Strength + (modelWeapon?.Weapon?.Strength ?? 0),
                Attacks = model.Model.Attacks * model.NumberOfModels,
                AP = (modelWeapon?.Weapon?.AP ?? 0)
            };

            var woundResult = calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
            totalWounds += woundResult;

            var weaponDamage = modelWeapon?.Weapon?.RandomDamage != null ? (((int)modelWeapon.Weapon.RandomDamage) + 1) / 2 : modelWeapon?.Weapon?.Damage ?? 1;
            if (weaponDamage >= defendingModel.Wounds)
            {
                modelsDead += woundResult;
            }
            else
            {
                var woundResultPerTarget = Math.Ceiling((decimal)(defendingModel.Wounds / weaponDamage));
                modelsDead += woundResult / woundResultPerTarget;
            }
        }

        return Tuple.Create(modelsDead, totalWounds);
    }

    string GetDefendingStatsString(DefendingModel defendingModel)
    {
        string stats = $"T{defendingModel.Toughness}";
        if (defendingModel.ArmourSave != null)
        {
            stats += $"/{defendingModel.ArmourSave}+";
        }

        if (defendingModel.InvulnerableSave != null)
        {
            stats += $"/{defendingModel.InvulnerableSave}++";
        }

        return stats;
    }
}