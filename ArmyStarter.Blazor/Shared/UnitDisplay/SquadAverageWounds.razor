@using ArmyStarter.Models;
@using ArmyStarter.Blazor.Provider
@inject HttpClient Http

<div>
    <div class="d-flex">
        <h3>
            Squads Average Wounds
        </h3>
        <span class="oi oi-pencil align-bottom" @onclick="@ToggleIsAlteringSquadEffects" />
    </div>
    @if (IsAlteringSquadEffects)
    {
        <div>

            <div>
                <input type="checkbox" @bind="IsWithinHalfRange" /> Is within half Range
            </div>
            <div>
                <input type="checkbox" @bind="IsRerolling1s" /> Is Rerolling 1's to Hit
            </div>
            <div>
                <input type="checkbox" @bind="IsRerollingHits" /> Is Rerolling Hits
            </div>
        </div>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Stats</th>
                <th>Shooting Wounds</th>
                <th>Shooting Killed</th>
                <th>Melee Wounds</th>
                <th>Melee Killed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var modelDisplay in SquadAverageWoundsDisplays)
            {
                <tr>
                    <td>@modelDisplay.Name</td>
                    <td>@modelDisplay.StatsString</td>
                    <td>@modelDisplay.ShootingWounds</td>
                    <td>@modelDisplay.ShootingKilled</td>
                    <td>@modelDisplay.MeleeWounds</td>
                    <td>@modelDisplay.MeleeKilled</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private bool _isWithinHalfRange;
    private bool _isRerolling1s;
    private bool _isRerollingHits;

    [Parameter]
    IList<PlanModel> PlanModels { get; set; }

    IList<SquadAverageWoundsDisplay> SquadAverageWoundsDisplays { get; set; } = new List<SquadAverageWoundsDisplay>();

    bool IsAlteringSquadEffects { get; set; }

    bool IsWithinHalfRange
    {
        get => _isWithinHalfRange;
        set
        {
            _isWithinHalfRange = !_isWithinHalfRange;
            Refresh();
        }
    }

    bool IsRerolling1s
    {
        get => _isRerolling1s;
        set
        {
            _isRerolling1s = !_isRerolling1s;
            Refresh();
        }
    }

    bool IsRerollingHits
    {
        get => _isRerollingHits;
        set
        {
            _isRerollingHits = !_isRerollingHits;
            Refresh();
        }
    }

    void ToggleIsAlteringSquadEffects()
    {
        IsAlteringSquadEffects = !IsAlteringSquadEffects;
    }

    protected override void OnParametersSet()
    {
        Refresh();
    }

    void Refresh()
    {
        var displays = new List<SquadAverageWoundsDisplay>();

        foreach (DefendingModel defendingModel in DefendingModels)
        {
            var shootingWounds = CalculateWoundsByShooting(defendingModel);
            var meleeWounds = CalculateWoundsByMelee(defendingModel);

            var display = new SquadAverageWoundsDisplay
            {
                Name = defendingModel.Name,
                ShootingWounds = shootingWounds.Item2.ToString("0.##"),
                ShootingKilled = shootingWounds.Item1.ToString("0.##"),
                MeleeWounds = meleeWounds.Item2.ToString("0.##"),
                MeleeKilled = meleeWounds.Item1.ToString("0.##"),
                StatsString = GetDefendingStatsString(defendingModel)
            };

            displays.Add(display);
        }

        SquadAverageWoundsDisplays = displays;
    }

    IList<DefendingModel> DefendingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();

            var defendingModels = new List<DefendingModel>()
{
                new DefendingModel { Name = "GEQ", Toughness = 3, ArmourSave = 5, Wounds = 1 },
                new DefendingModel { Name = "MEQ", Toughness = 4, ArmourSave = 3, Wounds = 1 },
                new DefendingModel { Name = "TEQ", Toughness = 4, ArmourSave = 2, InvulnerableSave = 5, Wounds = 2 },
                new DefendingModel { Name = "LV", Toughness = 6, ArmourSave = 3, Wounds = 10 },
                new DefendingModel { Name = "HV", Toughness = 8, ArmourSave = 3, InvulnerableSave = 4, Wounds = 24 },
            };

            return defendingModels;
        }
    }

    string ModelsKilled(decimal woundsDealt, int modelWounds)
    {
        var modelsKilledString = "";

        var modelsDead = Math.Floor(woundsDealt / modelWounds);
        if (modelsDead >= 1)
        {
            modelsKilledString += $"{modelsDead.ToString()} Dead";

            var remainder = Math.Floor(woundsDealt % modelWounds);
            if (remainder >= 1)
            {
                modelsKilledString += $" - {remainder.ToString()} Wounds";
            }
        }
        else
        {
            var remainder = Math.Floor(woundsDealt % modelWounds);
            if (remainder >= 1)
            {
                modelsKilledString += $"{remainder.ToString()} Wounds";
            }
        }

        return modelsKilledString;
    }

    Tuple<decimal, decimal> CalculateWoundsByShooting(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();

        decimal totalWounds = 0;
        var modelsKilledString = "";
        decimal modelsDead = 0;

        foreach (var model in PlanModels)
        {
            foreach (var modelWeapon in model.PlanModelWeapons.Where(weapon => weapon.Weapon.WeaponType != WeaponType.Melee))
            {
                decimal attacks = 0;
                if (modelWeapon.Weapon.RandomAttacks != null)
                {
                    attacks = decimal.Divide((int)modelWeapon.Weapon.RandomAttacks + 1, 2);
                }
                else
                {
                    Console.WriteLine($"{IsWithinHalfRange} -{ (decimal)(IsWithinHalfRange && modelWeapon.Weapon.WeaponType == WeaponType.RapidFire ? modelWeapon.Weapon.Attacks * 2 : modelWeapon.Weapon.Attacks ?? 0)}");
                    attacks = (decimal)(IsWithinHalfRange && modelWeapon.Weapon.WeaponType == WeaponType.RapidFire ? modelWeapon.Weapon.Attacks * 2 : modelWeapon.Weapon.Attacks ?? 0);
                }

                var attackingModel = new AttackingModel
                {
                    ToHit = model.Model.BallisticSkill ?? 0,
                    Strength = modelWeapon.Weapon.Strength,
                    Attacks = attacks * modelWeapon.Quantity,
                    AP = modelWeapon.Weapon.AP,
                    IsAutoHitting = modelWeapon.Weapon.IsAutoHitting,
                    IsRerollingHits = IsRerollingHits
                };

                var woundResult = calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
                totalWounds += woundResult;

                var weaponDamage = modelWeapon.Weapon.RandomDamage != null ? (((int)modelWeapon.Weapon.RandomDamage) + 1) / 2 : modelWeapon.Weapon.Damage ?? 1;
                if (weaponDamage >= defendingModel.Wounds)
                {
                    modelsDead += woundResult;
                }
                else
                {
                    var woundResultPerTarget = Math.Ceiling((decimal)(defendingModel.Wounds / weaponDamage));
                    modelsDead += woundResult / woundResultPerTarget;
                }
            }
        }

        return Tuple.Create(modelsDead, totalWounds);
    }

    Tuple<decimal, decimal> CalculateWoundsByMelee(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        decimal modelsDead = 0;
        foreach (var model in PlanModels)
        {
            var planModelWeapon = model.PlanModelWeapons?.FirstOrDefault(pmw => pmw.Weapon.WeaponType == WeaponType.Melee && pmw.Quantity > 0);
            var attackingModel = new AttackingModel
            {
                ToHit = model.Model.WeaponSkill ?? 0,
                Strength = model.Model.Strength + (planModelWeapon?.Weapon?.Strength ?? 0),
                Attacks = model.Model.Attacks * model.NumberOfModels,
                AP = (planModelWeapon?.Weapon?.AP ?? 0),
                IsAutoHitting = planModelWeapon?.Weapon?.IsAutoHitting ?? false,
                IsRerollingHits = IsRerollingHits
            };

            var woundResult = calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
            totalWounds += woundResult;

            var weaponDamage = planModelWeapon?.Weapon?.RandomDamage != null ? (((int)planModelWeapon.Weapon.RandomDamage) + 1) / 2 : planModelWeapon?.Weapon?.Damage ?? 1;
            if (weaponDamage >= defendingModel.Wounds)
            {
                modelsDead += woundResult;
            }
            else
            {
                var woundResultPerTarget = Math.Ceiling((decimal)(defendingModel.Wounds / weaponDamage));
                modelsDead += woundResult / woundResultPerTarget;
            }
        }

        return Tuple.Create(modelsDead, totalWounds);
    }

    string GetDefendingStatsString(DefendingModel defendingModel)
    {
        string stats = $"T{defendingModel.Toughness}";
        if (defendingModel.ArmourSave != null)
        {
            stats += $"/{defendingModel.ArmourSave}+";
        }

        if (defendingModel.InvulnerableSave != null)
        {
            stats += $"/{defendingModel.InvulnerableSave}++";
        }

        return stats;
    }
}