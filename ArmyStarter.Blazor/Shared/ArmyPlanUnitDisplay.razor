@using ArmyStarter.Models;
@using ArmyStarter.Blazor.Provider
@inject HttpClient Http

<div class="unit-details">
    <h3 class="card-section-header">
        <span class="card-section-header-left">@PlanUnit.Unit.Name</span>
        <span class="card-section-header-right">Pts: @TotalPoints</span>
    </h3>
    <div class="unit-details-content">
        <table class="table">
            <thead>
                <tr>
                    <th class="model-table-column-name">Name</th>
                    <th class="model-table-column-characteristic">Number Of Models</th>
                    <th class="model-table-column-characteristic">M</th>
                    <th class="model-table-column-characteristic">WS</th>
                    <th class="model-table-column-characteristic">BS</th>
                    <th class="model-table-column-characteristic">S</th>
                    <th class="model-table-column-characteristic">T</th>
                    <th class="model-table-column-characteristic">W</th>
                    <th class="model-table-column-characteristic">A</th>
                    <th class="model-table-column-characteristic">LD</th>
                    <th class="model-table-column-characteristic">Sv+</th>
                    <th class="model-table-column-characteristic">Inv+</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in @PlanUnit.Unit.Models)
                {
                    <tr>
                        <td>@model.Name</td>
                        <td>@GetNumberOfModels(@model.ModelId)</td>
                        <td>@model.Movement"</td>
                        <td>@model.WeaponSkill+</td>
                        <td>@model.BallisticSkill+</td>
                        <td>@model.Strength</td>
                        <td>@model.Toughness</td>
                        <td>@model.Wounds</td>
                        <td>@model.Attacks</td>
                        <td>@model.LeaderShip</td>
                        <td>@model.ArmourSave</td>
                        <td>@model.InvulnerableSave</td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <h3>
                Squads Average Wounds
            </h3>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Stats</th>
                        <th>Shooting</th>
                        <th>Melee</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var defendingModel in DefendingModels)
                    {
                        <tr>
                            <td>@defendingModel.Name</td>
                            <td>@GetDefendingStatsString(defendingModel)</td>
                            <td>@CalculateWoundsByShooting(defendingModel)</td>
                            <td>@CalculateWoundsByMelee(defendingModel)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <h3>
                Squads Average Wounds Against
            </h3>
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Stats</th>
                        <th>Average Wounds</th>
                        <th>Average Shots To Kill Unit</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var attackingModel in AttackingModels)
                    {
                    <tr>
                        <td>@attackingModel.Name</td>
                        <td>@GetAttackingStatsString(attackingModel)</td>
                        <td>@CalculateWoundsOnUnit(attackingModel)</td>
                        <td>@CalculateAverageShotsToKill(attackingModel)</td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    PlanUnit PlanUnit { get; set; }

    [Parameter]
    EventCallback<PlanUnit> PlanUnitChanged { get; set; }

    int TotalPoints
    {
        get
        {
            return PlanUnit.SelectedModels?.Sum(model => model.Model.PointsValue * model.NumberOfModels + model.Model.Weapons.Sum(weapon => weapon.PointsValue) * model.NumberOfModels) ?? 0;
        }
    }

    IList<DefendingModel> DefendingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();
            var guardsman = new DefendingModel { Toughness = 3, ArmourSave = 5 };

            var defendingModels = new List<DefendingModel>()
        {
                new DefendingModel { Name = "GEQ", Toughness = 3, ArmourSave = 5 },
                new DefendingModel { Name = "MEQ", Toughness = 4, ArmourSave = 3 },
                new DefendingModel { Name = "TEQ", Toughness = 4, ArmourSave = 2, InvulnerableSave = 5 },
                new DefendingModel { Name = "LV", Toughness = 6, ArmourSave = 3 },
                new DefendingModel { Name = "HV", Toughness = 8, ArmourSave = 3, InvulnerableSave = 4 },
            };

            return defendingModels;
        }
    }

    string CalculateWoundsByShooting(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var modelWeapon = model.Model?.Weapons?.FirstOrDefault(weapon => weapon.Weapon.WeaponType != WeaponType.Melee);
            if (modelWeapon != null)
            {
                var attackingModel = new AttackingModel
                {
                    ToHit = model.Model.BallisticSkill ?? 0,
                    Strength = modelWeapon.Weapon.Strength,
                    Attacks = modelWeapon.Weapon.Attacks * model.NumberOfModels,
                    AP = modelWeapon.Weapon.AP
                };
                totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
            }
        }

        return totalWounds.ToString("0.##");
    }

    string CalculateWoundsByMelee(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var modelWeapon = model.Model.Weapons?.FirstOrDefault(weapon => weapon.Weapon.WeaponType == WeaponType.Melee);
            var attackingModel = new AttackingModel
            {
                ToHit = model.Model.WeaponSkill ?? 0,
                Strength = model.Model.Strength + (modelWeapon?.Weapon?.Strength ?? 0),
                Attacks = model.Model.Attacks * model.NumberOfModels,
                AP = (modelWeapon?.Weapon?.AP ?? 0)
            };
            totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        return totalWounds.ToString("0.##");
    }

    string GetDefendingStatsString(DefendingModel defendingModel)
    {
        string stats = $"T{defendingModel.Toughness}";
        if (defendingModel.ArmourSave != null)
        {
            stats += $"/{defendingModel.ArmourSave}+";
        }

        if (defendingModel.InvulnerableSave != null)
        {
            stats += $"/{defendingModel.InvulnerableSave}++";
        }

        return stats;
    }

    IList<AttackingModel> AttackingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();
            var guardsman = new DefendingModel { Toughness = 3, ArmourSave = 5 };

            var attackingModels = new List<AttackingModel>()
        {
                new AttackingModel{ Name = "GEQ", ToHit = 4, Attacks = 1, AP = 0, Strength = 3 },
                new AttackingModel{ Name = "MEQ", ToHit = 3, Attacks = 1, AP = 0, Strength = 4 },
                new AttackingModel{ Name = "Anti-HI", ToHit = 3, Attacks = 1, AP = 1, Strength = 8 },
                new AttackingModel{ Name = "Anti-Tank", ToHit = 3, Attacks = 1, AP = 3, Strength = 9 },
            };

            return attackingModels;
        }
    }

    string CalculateWoundsOnUnit(AttackingModel attackingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var defendingModel = new DefendingModel
            {
                ArmourSave = model.Model.ArmourSave,
                FeelNoPainSave = model.Model.FeelNoPainSave,
                InvulnerableSave = model.Model.InvulnerableSave,
                Toughness = model.Model.Toughness,
                Name = model.Model.Name
            };
            totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        totalWounds = totalWounds / PlanUnit.SelectedModels.Count;

        return totalWounds.ToString("0.##");
    }

    string CalculateAverageShotsToKill(AttackingModel attackingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalNumberOfShots = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var defendingModel = new DefendingModel
            {
                ArmourSave = model.Model.ArmourSave,
                FeelNoPainSave = model.Model.FeelNoPainSave,
                InvulnerableSave = model.Model.InvulnerableSave,
                Toughness = model.Model.Toughness,
                Name = model.Model.Name
            };

            totalNumberOfShots += model.NumberOfModels / calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        return Math.Round(totalNumberOfShots).ToString();
    }

    string GetAttackingStatsString(AttackingModel attackingModel)
    {
        string stats = $"BS{attackingModel.ToHit}+";
        if (attackingModel.Strength != 0)
        {
            stats += $"/S{attackingModel.Strength}";
        }

        if (attackingModel.AP != 0)
        {
            stats += $"/AP{attackingModel.AP}-";
        }

        return stats;
    }

    int GetNumberOfModels(Guid modelId)
    {
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelId);

        return selectedModel != null ? selectedModel.NumberOfModels : 0;
    }


}