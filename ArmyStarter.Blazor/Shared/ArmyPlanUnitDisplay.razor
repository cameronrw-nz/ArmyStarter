@using ArmyStarter.Models;
@using ArmyStarter.Blazor.Provider
@inject HttpClient Http

<div class="unit-details">
    <h3 class="card-section-header">
        <span class="card-section-header-left">@PlanUnit.Unit.Name</span>
        <span class="card-section-header-right">Pts: @TotalPoints</span>
    </h3>
    <div class="unit-details-content">
        <h3>
            Unit
        </h3>
        <table class="table">
            <thead>
                <tr>
                    <th class="model-table-column-name">Name</th>
                    <th class="model-table-column-characteristic">Number Of Models</th>
                    <th class="model-table-column-characteristic">M</th>
                    <th class="model-table-column-characteristic">WS</th>
                    <th class="model-table-column-characteristic">BS</th>
                    <th class="model-table-column-characteristic">S</th>
                    <th class="model-table-column-characteristic">T</th>
                    <th class="model-table-column-characteristic">W</th>
                    <th class="model-table-column-characteristic">A</th>
                    <th class="model-table-column-characteristic">LD</th>
                    <th class="model-table-column-characteristic">Sv+</th>
                    <th class="model-table-column-characteristic">Inv+</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in @PlanUnit.Unit.Models)
                {
                    <tr>
                        <td>@model.Name</td>
                        <td>
                            <input class="input"
                                   max="@model.MaximumModelsPerUnit"
                                   min="@model.MinimumModelsPerUnit"
                                   type="number"
                                   @onchange=@(newValue => ChangeSelectedModelNumber(newValue, model.ModelId))
                                   value="@GetNumberOfModels(@model.ModelId)" />
                        </td>
                        <td>@model.Movement"</td>
                        <td>@model.WeaponSkill+</td>
                        <td>@model.BallisticSkill+</td>
                        <td>@model.Strength</td>
                        <td>@model.Toughness</td>
                        <td>@model.Wounds</td>
                        <td>@model.Attacks</td>
                        <td>@model.LeaderShip</td>
                        <td>@model.ArmourSave</td>
                        <td>@model.InvulnerableSave</td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <div class="d-flex">
                <h3>
                    Weapons
                </h3>
                <span class="oi oi-pencil align-bottom" @onclick="@ToggleEdittingWeapons" />
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Weapon</th>
                        <th>Quantity</th>
                        <th>Points</th>
                        <th>Range</th>
                        <th>Weapon Type</th>
                        <th>Strength</th>
                        <th>AP</th>
                    </tr>
                </thead>
                <tbody>
                    @if (IsEdittingWeapons)
                    {

                        @foreach (var selectedModel in PlanUnit.SelectedModels)
                        {
                            <tr><td><b>@selectedModel.Model.Name</b></td></tr>
                            @foreach (var modelWeapon in selectedModel.Model.Weapons)
                            {
                                <tr>
                                    <td>@modelWeapon.Weapon.Name</td>
                                    <td>
                                        <input class="input"
                                               max="@(modelWeapon.MaximumPerModel * PlanUnit.SelectedModels.Sum(model => model.NumberOfModels))"
                                               min="0"
                                               type="number"
                                               @onchange=@(newValue => ChangeWeaponNumbers(newValue, selectedModel.PlanModelId, modelWeapon.WeaponId))
                                               value="@GetNumberOfWeapons(modelWeapon)" />
                                    </td>
                                    <td>@modelWeapon.PointsValue</td>
                                    <td>@modelWeapon.Weapon.Range"</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.WeaponType.ToString() + " " + modelWeapon.Weapon.Attacks : modelWeapon.Weapon.WeaponType.ToString())</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.Strength.ToString() : modelWeapon.Weapon.Strength == 0 ? "User" : modelWeapon.Weapon.Strength.ToString())</td>
                                    <td>@(modelWeapon.Weapon.AP > 0 ? -modelWeapon.Weapon.AP : 0)</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        @foreach (var selectedModel in PlanUnit.SelectedModels)
                        {
                            <tr><td><b>@selectedModel.Model.Name</b></td></tr>
                            @foreach (var modelWeapon in selectedModel.Model.Weapons.Where(mw => selectedModel.PlanModelWeapons.FirstOrDefault(pmw => pmw.WeaponId == mw.WeaponId)?.Quantity > 0))
                            {
                                <tr>
                                    <td>@modelWeapon.Weapon.Name</td>
                                    <td>@GetNumberOfWeapons(modelWeapon)</td>
                                    <td>@modelWeapon.PointsValue</td>
                                    <td>@modelWeapon.Weapon.Range"</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.WeaponType.ToString() + " " + modelWeapon.Weapon.Attacks : modelWeapon.Weapon.WeaponType.ToString())</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.Strength.ToString() : modelWeapon.Weapon.Strength == 0 ? "User" : modelWeapon.Weapon.Strength.ToString())</td>
                                    <td>@(modelWeapon.Weapon.AP > 0 ? -modelWeapon.Weapon.AP : 0)</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
        <ArmyStarter.Blazor.Shared.UnitDisplay.SquadAverageWounds PlanModels="@PlanUnit.SelectedModels" />
        <ArmyStarter.Blazor.Shared.UnitDisplay.SquadAverageWoundsAgainst PlanModels="@PlanUnit.SelectedModels" />
    </div>
</div>

@code {
    [Parameter]
    PlanUnit PlanUnit { get; set; }

    [Parameter]
    EventCallback<PlanUnit> PlanUnitChanged { get; set; }

    bool IsEdittingWeapons { get; set; }

    void ToggleEdittingWeapons()
    {
        IsEdittingWeapons = !IsEdittingWeapons;
    }

    int TotalPoints
    {
        get
        {
            return PlanUnit.SelectedModels?.Sum(model => model.Model.PointsValue * model.NumberOfModels + model.PlanModelWeapons.Sum(weapon => weapon.Quantity * (model.Model.Weapons.FirstOrDefault(w => w.WeaponId == weapon.WeaponId)?.PointsValue))) ?? 0;
        }
    }

    int GetNumberOfModels(Guid modelId)
    {
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelId);

        return selectedModel != null ? selectedModel.NumberOfModels : 0;
    }

    void ChangeSelectedModelNumber(UIChangeEventArgs value, Guid modelId)
    {
        var newNumberOfModels = int.Parse(value.Value.ToString());
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelId);

        if (selectedModel != null)
        {
            var difference = newNumberOfModels - selectedModel.NumberOfModels;

            foreach (var weapon in selectedModel.PlanModelWeapons.Where(w => selectedModel.Model.Weapons.FirstOrDefault(mw => mw.WeaponId == w.WeaponId).IsDefaultWeapon))
            {
                weapon.Quantity += difference;
            }
            selectedModel.NumberOfModels = newNumberOfModels;
        }
    }

    int GetNumberOfWeapons(ModelWeapon modelWeapon)
    {
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelWeapon.ModelId);

        var selectedWeapon = selectedModel?.PlanModelWeapons?.FirstOrDefault(pmw => pmw.WeaponId == modelWeapon.WeaponId);

        return selectedWeapon != null ? selectedWeapon.Quantity : 0;
    }

    void ChangeWeaponNumbers(UIChangeEventArgs value, Guid planModelId, Guid weaponId)
    {
        var selectedModel = PlanUnit.SelectedModels?.FirstOrDefault(model => model.PlanModelId == planModelId);
        var planModelWeapon = selectedModel?.PlanModelWeapons?.FirstOrDefault(weapon => weapon.WeaponId == weaponId);
        var modelWeapon = selectedModel.Model.Weapons.FirstOrDefault(mw => mw.WeaponId == weaponId);

        if (modelWeapon != null && modelWeapon.CanBeSwapped && modelWeapon.SwappedWithWeaponId != null)
        {
            var swappedWeaponToChange = selectedModel?.PlanModelWeapons?.FirstOrDefault(weapon => weapon.WeaponId == modelWeapon.SwappedWithWeaponId);
            if (swappedWeaponToChange != null)
            {
                var differenceInQuantity = int.Parse(value.Value.ToString()) - (planModelWeapon?.Quantity ?? 0);
                swappedWeaponToChange.Quantity = swappedWeaponToChange.Quantity - differenceInQuantity;
            }
        }

        if (planModelWeapon != null)
        {
            planModelWeapon.Quantity = int.Parse(value.Value.ToString());
        }
        else
        {
            selectedModel.PlanModelWeapons.Add(new PlanModelWeapon { PlanModelId = planModelId, WeaponId = weaponId, Weapon = modelWeapon?.Weapon, Quantity = int.Parse(value.Value.ToString()) });
        }

        PlanUnitChanged.InvokeAsync(PlanUnit);
    }
}