@using ArmyStarter.Models;
@using ArmyStarter.Blazor.Provider
@inject HttpClient Http

<div class="unit-details">
    <h3 class="card-section-header">
        <span class="card-section-header-left">@PlanUnit.Unit.Name</span>
        <span class="card-section-header-right">Pts: @TotalPoints</span>
    </h3>
    <div class="unit-details-content">
        <table class="table">
            <thead>
                <tr>
                    <th class="model-table-column-name">Name</th>
                    <th class="model-table-column-characteristic">Number Of Models</th>
                    <th class="model-table-column-characteristic">M</th>
                    <th class="model-table-column-characteristic">WS</th>
                    <th class="model-table-column-characteristic">BS</th>
                    <th class="model-table-column-characteristic">S</th>
                    <th class="model-table-column-characteristic">T</th>
                    <th class="model-table-column-characteristic">W</th>
                    <th class="model-table-column-characteristic">A</th>
                    <th class="model-table-column-characteristic">LD</th>
                    <th class="model-table-column-characteristic">Sv+</th>
                    <th class="model-table-column-characteristic">Inv+</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in @PlanUnit.Unit.Models)
                {
                    <tr>
                        <td>@model.Name</td>
                        <td>
                            <input class="input"
                                   max="@model.MaximumModelsPerUnit"
                                   min="@model.MinimumModelsPerUnit"
                                   type="number"
                                   @onchange=@(newValue => ChangeSelectedModelNumber(newValue, model.ModelId))
                                   value="@GetNumberOfModels(@model.ModelId)" />
                        </td>
                        <td>@model.Movement"</td>
                        <td>@model.WeaponSkill+</td>
                        <td>@model.BallisticSkill+</td>
                        <td>@model.Strength</td>
                        <td>@model.Toughness</td>
                        <td>@model.Wounds</td>
                        <td>@model.Attacks</td>
                        <td>@model.LeaderShip</td>
                        <td>@model.ArmourSave</td>
                        <td>@model.InvulnerableSave</td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <div class="d-flex">
                <h3>
                    Weapons
                </h3>
                <span class="oi oi-pencil align-bottom" @onclick="@ToggleEdittingWeapons" />
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Weapon</th>
                        <th>Quantity</th>
                        <th>Points</th>
                        <th>Range</th>
                        <th>Weapon Type</th>
                        <th>Strength</th>
                        <th>AP</th>
                    </tr>
                </thead>
                <tbody>

                    @if (IsEdittingWeapons)
                    {

                        @foreach (var selectedModel in PlanUnit.SelectedModels)
                        {
                            <tr><td>@selectedModel.Model.Name</td></tr>
                            @foreach (var modelWeapon in selectedModel.Model.Weapons)
                            {
                                <tr>
                                    <td>@modelWeapon.Weapon.Name</td>
                                    <td>
                                        <input class="input"
                                               max="@(modelWeapon.MaximumPerModel * @selectedModel.NumberOfModels)"
                                               min="0"
                                               type="number"
                                               @onchange=@(newValue => ChangeWeaponNumbers(newValue, selectedModel.PlanModelId, modelWeapon.WeaponId))
                                               value="@GetNumberOfWeapons(modelWeapon)" />
                                    </td>
                                    <td>@modelWeapon.PointsValue</td>
                                    <td>@modelWeapon.Weapon.Range"</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.WeaponType.ToString() + modelWeapon.Weapon.Attacks : modelWeapon.Weapon.WeaponType.ToString())</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.Strength.ToString() : modelWeapon.Weapon.Strength == 0 ? "User" : modelWeapon.Weapon.Strength.ToString())</td>
                                    <td>@(modelWeapon.Weapon.AP > 0 ? -modelWeapon.Weapon.AP : 0)</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        @foreach (var selectedModel in PlanUnit.SelectedModels)
                        {
                            <tr><td>@selectedModel.Model.Name</td></tr>
                            @foreach (var modelWeapon in selectedModel.Model.Weapons.Where(mw => selectedModel.PlanModelWeapons.FirstOrDefault(pmw => pmw.WeaponId == mw.WeaponId)?.Quantity > 0))
                            {
                                <tr>
                                    <td>@modelWeapon.Weapon.Name</td>
                                    <td>@GetNumberOfWeapons(modelWeapon)</td>
                                    <td>@modelWeapon.PointsValue</td>
                                    <td>@modelWeapon.Weapon.Range"</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.WeaponType.ToString() + modelWeapon.Weapon.Attacks : modelWeapon.Weapon.WeaponType.ToString())</td>
                                    <td>@(modelWeapon.Weapon.WeaponType != WeaponType.Melee ? modelWeapon.Weapon.Strength.ToString() : modelWeapon.Weapon.Strength == 0 ? "User" : modelWeapon.Weapon.Strength.ToString())</td>
                                    <td>@(modelWeapon.Weapon.AP > 0 ? -modelWeapon.Weapon.AP : 0)</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
        <ArmyStarter.Blazor.Shared.UnitDisplay.SquadAverageWounds PlanModels="@PlanUnit.SelectedModels" />
        <ArmyStarter.Blazor.Shared.UnitDisplay.SquadAverageWoundsAgainst PlanModels="@PlanUnit.SelectedModels" />
    </div>
</div>

@code {
    [Parameter]
    PlanUnit PlanUnit { get; set; }

    [Parameter]
    EventCallback<PlanUnit> PlanUnitChanged { get; set; }

    bool IsEdittingWeapons { get; set; }

    void ToggleEdittingWeapons()
    {
        IsEdittingWeapons = !IsEdittingWeapons;
    }

    int TotalPoints
    {
        get
        {
            return PlanUnit.SelectedModels?.Sum(model => model.Model.PointsValue * model.NumberOfModels + model.PlanModelWeapons.Sum(weapon => weapon.Quantity * (model.Model.Weapons.FirstOrDefault(w => w.WeaponId == weapon.WeaponId)?.PointsValue))) ?? 0;
        }
    }

    IList<DefendingModel> DefendingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();
            var guardsman = new DefendingModel { Toughness = 3, ArmourSave = 5 };

            var defendingModels = new List<DefendingModel>()
{
                new DefendingModel { Name = "GEQ", Toughness = 3, ArmourSave = 5, Wounds = 1 },
                new DefendingModel { Name = "MEQ", Toughness = 4, ArmourSave = 3, Wounds = 1 },
                new DefendingModel { Name = "TEQ", Toughness = 4, ArmourSave = 2, InvulnerableSave = 5, Wounds = 2 },
                new DefendingModel { Name = "LV", Toughness = 6, ArmourSave = 3, Wounds = 10 },
                new DefendingModel { Name = "HV", Toughness = 8, ArmourSave = 3, InvulnerableSave = 4, Wounds = 24 },
            };

            return defendingModels;
        }
    }

    string CalculateWoundsByShooting(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            foreach (var modelWeapon in model.PlanModelWeapons.Where(weapon => weapon.Weapon.WeaponType != WeaponType.Melee))
            {
                decimal attacks = 0;
                if (modelWeapon.Weapon.RandomAttacks != null)
                {
                    attacks = (((int)modelWeapon.Weapon.RandomAttacks) + 1) / 2;
                }
                else
                {
                    attacks = modelWeapon.Weapon.Attacks ?? 0;
                }

                var attackingModel = new AttackingModel
                {
                    ToHit = model.Model.BallisticSkill ?? 0,
                    Strength = modelWeapon.Weapon.Strength,
                    Attacks = attacks * modelWeapon.Quantity,
                    AP = modelWeapon.Weapon.AP
                };
                totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
            }
        }

        return totalWounds.ToString("0.##");
    }

    string CalculateWoundsByMelee(DefendingModel defendingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var modelWeapon = model.Model.Weapons?.FirstOrDefault(weapon => weapon.Weapon.WeaponType == WeaponType.Melee);
            var attackingModel = new AttackingModel
            {
                ToHit = model.Model.WeaponSkill ?? 0,
                Strength = model.Model.Strength + (modelWeapon?.Weapon?.Strength ?? 0),
                Attacks = model.Model.Attacks * model.NumberOfModels,
                AP = (modelWeapon?.Weapon?.AP ?? 0)
            };
            totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        return totalWounds.ToString("0.##");
    }

    string GetDefendingStatsString(DefendingModel defendingModel)
    {
        string stats = $"T{defendingModel.Toughness}";
        if (defendingModel.ArmourSave != null)
        {
            stats += $"/{defendingModel.ArmourSave}+";
        }

        if (defendingModel.InvulnerableSave != null)
        {
            stats += $"/{defendingModel.InvulnerableSave}++";
        }

        return stats;
    }

    IList<AttackingModel> AttackingModels
    {
        get
        {
            CalculatorProvider calculatorProvider = new CalculatorProvider();
            var guardsman = new DefendingModel { Toughness = 3, ArmourSave = 5 };

            var attackingModels = new List<AttackingModel>()
{
                new AttackingModel{ Name = "GEQ", ToHit = 4, Attacks = 1, AP = 0, Strength = 3 },
                new AttackingModel{ Name = "MEQ", ToHit = 3, Attacks = 1, AP = 0, Strength = 4 },
                new AttackingModel{ Name = "Anti-HI", ToHit = 3, Attacks = 1, AP = 1, Strength = 8 },
                new AttackingModel{ Name = "Anti-Tank", ToHit = 3, Attacks = 1, AP = 3, Strength = 9 },
            };

            return attackingModels;
        }
    }

    string CalculateWoundsOnUnit(AttackingModel attackingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalWounds = 0;
        foreach (PlanModel model in PlanUnit.SelectedModels)
        {
            var defendingModel = new DefendingModel
            {
                ArmourSave = model.Model.ArmourSave,
                FeelNoPainSave = model.Model.FeelNoPainSave,
                InvulnerableSave = model.Model.InvulnerableSave,
                Toughness = model.Model.Toughness,
                Name = model.Model.Name
            };
            totalWounds += calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        totalWounds = totalWounds / PlanUnit.SelectedModels.Count;

        return totalWounds.ToString("0.##");
    }

    string CalculateAverageShotsToKill(AttackingModel attackingModel)
    {
        CalculatorProvider calculatorProvider = new CalculatorProvider();
        decimal totalNumberOfShots = 0;
        foreach (var model in PlanUnit.SelectedModels)
        {
            var defendingModel = new DefendingModel
            {
                ArmourSave = model.Model.ArmourSave,
                FeelNoPainSave = model.Model.FeelNoPainSave,
                InvulnerableSave = model.Model.InvulnerableSave,
                Toughness = model.Model.Toughness,
                Name = model.Model.Name
            };

            totalNumberOfShots += model.NumberOfModels / calculatorProvider.GetTotalWoundsResult(attackingModel, defendingModel);
        }

        return Math.Round(totalNumberOfShots).ToString();
    }

    string GetAttackingStatsString(AttackingModel attackingModel)
    {
        string stats = $"BS{attackingModel.ToHit}+";
        if (attackingModel.Strength != 0)
        {
            stats += $"/S{attackingModel.Strength}";
        }

        if (attackingModel.AP != 0)
        {
            stats += $"/AP{attackingModel.AP}-";
        }

        return stats;
    }

    int GetNumberOfModels(Guid modelId)
    {
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelId);

        return selectedModel != null ? selectedModel.NumberOfModels : 0;
    }

    void ChangeSelectedModelNumber(UIChangeEventArgs value, Guid modelId)
    {
        var newNumberOfModels = int.Parse(value.Value.ToString());
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelId);

        if (selectedModel != null)
        {
            var difference = newNumberOfModels - selectedModel.NumberOfModels;

            foreach (var weapon in selectedModel.PlanModelWeapons.Where(w => selectedModel.Model.Weapons.FirstOrDefault(mw => mw.WeaponId == w.WeaponId).IsDefaultWeapon))
            {
                weapon.Quantity += difference;
            }
            selectedModel.NumberOfModels = newNumberOfModels;
        }
    }

    int GetNumberOfWeapons(ModelWeapon modelWeapon)
    {
        var selectedModel = PlanUnit.SelectedModels.FirstOrDefault(model => model.Model.ModelId == modelWeapon.ModelId);

        var selectedWeapon = selectedModel?.PlanModelWeapons?.FirstOrDefault(pmw => pmw.WeaponId == modelWeapon.WeaponId);

        return selectedWeapon != null ? selectedWeapon.Quantity : 0;
    }

    void ChangeWeaponNumbers(UIChangeEventArgs value, Guid planModelId, Guid weaponId)
    {
        var selectedModel = PlanUnit.SelectedModels?.FirstOrDefault(model => model.PlanModelId == planModelId);
        var planModelWeapon = selectedModel?.PlanModelWeapons?.FirstOrDefault(weapon => weapon.WeaponId == weaponId);
        var modelWeapon = selectedModel.Model.Weapons.FirstOrDefault(mw => mw.WeaponId == weaponId);

        if (modelWeapon != null && modelWeapon.CanBeSwapped && modelWeapon.SwappedWithWeaponId != null)
        {
            var swappedWeaponToChange = selectedModel?.PlanModelWeapons?.FirstOrDefault(weapon => weapon.WeaponId == modelWeapon.SwappedWithWeaponId);
            if (swappedWeaponToChange != null)
            {
                var differenceInQuantity = int.Parse(value.Value.ToString()) - (planModelWeapon?.Quantity ?? 0);
                swappedWeaponToChange.Quantity = swappedWeaponToChange.Quantity - differenceInQuantity;
            }
        }

        if (planModelWeapon != null)
        {
            planModelWeapon.Quantity = int.Parse(value.Value.ToString());
        }
        else
        {
            selectedModel.PlanModelWeapons.Add(new PlanModelWeapon { PlanModelId = planModelId, WeaponId = weaponId, Weapon = modelWeapon?.Weapon, Quantity = int.Parse(value.Value.ToString()) });
        }

        PlanUnitChanged.InvokeAsync(PlanUnit);
    }
}