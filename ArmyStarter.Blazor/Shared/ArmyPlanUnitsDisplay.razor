@using ArmyStarter.Models;
@inject HttpClient Http

<div class="units-display">
    <div class="card-items">
        @foreach (var rosterToUnit in RosterToUnits.Where(a => a.Value.Count() != 0))
        {
            <div class="card-section">
                <h3 class="card-section-header">@rosterToUnit.Key.ToString()</h3>
                @foreach (PlanUnit unit in rosterToUnit.Value)
                {
                    <div class="card-content" @onclick="@(() =>SelectUnit(unit))">
                        <div class="card-name">
                            @unit.Unit.Name
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (DisplayedUnit != null)
    {
        <ArmyPlanUnitDisplay @bind-PlanUnit="@DisplayedUnit" />
    }
</div>


@code {
    [Parameter]
    PlanArmy PlanArmy { get; set; }

    [Parameter]
    EventCallback<PlanArmy> PlanArmyChanged { get; set; }

    bool IsAddingUnit { get; set; }

    Unit SelectedUnit { get; set; }

    Dictionary<RosterPositionType, IEnumerable<PlanUnit>> RosterToUnits { get; set; }

    PlanUnit DisplayedUnit { get; set; }

    protected override void OnParametersSet()
    {
        SetRosterDictionary();
    }

    void SetRosterDictionary()
    {
        RosterToUnits = new Dictionary<RosterPositionType, IEnumerable<PlanUnit>>();
        foreach (RosterPositionType type in (RosterPositionType[])Enum.GetValues(typeof(RosterPositionType)))
        {
            IEnumerable<PlanUnit> units = PlanArmy.PlanUnits.Where(u => u.Unit.RosterPosition.RosterPositionEnum == type);
            RosterToUnits.Add(type, units);
        }
    }

    void SelectUnit(PlanUnit unit)
    {
        DisplayedUnit = unit;
    }
}
